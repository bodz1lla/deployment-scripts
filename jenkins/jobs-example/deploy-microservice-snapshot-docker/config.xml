<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>5</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty plugin="gitlab-plugin@1.4.0">
      <gitLabConnection></gitLabConnection>
    </com.dabsquared.gitlabjenkins.connection.GitLabConnectionProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.ChoiceParameterDefinition>
          <name>Environment</name>
          <description></description>
          <choices class="java.util.Arrays$ArrayList">
            <a class="string-array">
              <string>dev</string>
              <string>test</string>
              <string>staging</string>
            </a>
          </choices>
        </hudson.model.ChoiceParameterDefinition>
        <net.uaznia.lukanus.hudson.plugins.gitparameter.GitParameterDefinition plugin="git-parameter@0.7.0">
          <name>branch</name>
          <description></description>
          <uuid>7d2ca4b6-49ef-43e9-b1b9-299308311ba3</uuid>
          <type>PT_BRANCH_TAG</type>
          <branch></branch>
          <tagFilter>*</tagFilter>
          <branchFilter>.*</branchFilter>
          <sortMode>DESCENDING_SMART</sortMode>
          <defaultValue>master</defaultValue>
          <selectedValue>TOP</selectedValue>
          <quickFilterEnabled>false</quickFilterEnabled>
        </net.uaznia.lukanus.hudson.plugins.gitparameter.GitParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.0.0">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
	      <url>gitlab@gitlab.example.com:/devs/microservice.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>$branch</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.dabsquared.gitlabjenkins.GitLabPushTrigger plugin="gitlab-plugin@1.4.0">
      <spec></spec>
      <triggerOnPush>true</triggerOnPush>
      <triggerOnMergeRequest>true</triggerOnMergeRequest>
      <triggerOpenMergeRequestOnPush>never</triggerOpenMergeRequestOnPush>
      <triggerOnNoteRequest>false</triggerOnNoteRequest>
      <noteRegex></noteRegex>
      <ciSkip>true</ciSkip>
      <skipWorkInProgressMergeRequest>false</skipWorkInProgressMergeRequest>
      <setBuildDescription>true</setBuildDescription>
      <branchFilterType>All</branchFilterType>
      <includeBranchesSpec></includeBranchesSpec>
      <excludeBranchesSpec></excludeBranchesSpec>
      <targetBranchRegex></targetBranchRegex>
    </com.dabsquared.gitlabjenkins.GitLabPushTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command># prepare phase

node --version
npm install

</command>
    </hudson.tasks.Shell>
    <org.jenkinsci.plugins.scriptler.builder.ScriptlerBuilder plugin="scriptler@2.9">
      <builderId>1464942434935_3</builderId>
      <scriptId>fetch-version.groovy</scriptId>
      <propagateParams>false</propagateParams>
      <parameters>
        <org.jenkinsci.plugins.scriptler.config.Parameter>
          <name>JOB_NAME</name>
          <value>Depoy Snapshot Microservice Docker</value>
        </org.jenkinsci.plugins.scriptler.config.Parameter>
      </parameters>
    </org.jenkinsci.plugins.scriptler.builder.ScriptlerBuilder>
    <EnvInjectBuilder plugin="envinject@1.92.1">
      <info>
        <propertiesFilePath>env.properties</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
    <hudson.tasks.Shell>
      <command># build phase

npm run build server myserver</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

#static
Tag=&quot;v${version}&quot;

staticlocal=&quot;dist/client/*&quot;
staticremote=&quot;/home/dockers/static/content/$Tag&quot;
nodes=&apos;deployer@dev-node1 deployer@test-node1 deployer@test-node2&apos;
staging=&apos;deployer@staging&apos;

if [[ $Environment == &quot;dev&quot; || $Environment == &quot;test&quot; ]]; then 
for i in $nodes; do
ssh $i &quot;mkdir -p $staticremote&quot;
scp -r $staticlocal $i:$staticremote
done
elif [ $Environment == &quot;staging&quot; ]; then
ssh -p 438 $staging &quot;mkdir -p $staticremote&quot;
scp -P 438 -r $staticlocal $staging:$staticremote
else
echo &quot;$Environment static content uploaded.&quot;
fi</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>#!/bin/bash

#service
Image=&quot;registry-test.example.com/$Environment/microservice&quot;
ImageStaging=&quot;registry.example.com/$Environment/microservice&quot;
Tag=&quot;snapshot&quot;
ServiceFolder=&quot;microservice&quot;

if [ $Environment == &quot;test&quot; ]; then 
docker build --no-cache -t registry-test.example.com/$Environment/microservice:$Tag -f config/Dockerfile .
docker push registry-test.example.com/$Environment/microservice:$Tag

ansible-playbook /tmp/deployment-scripts/ansible-playbooks/deploy-snapshot/deploy.yml --extra-vars=&quot;Environment=$Environment Image=$Image Tag=$Tag ServiceFolder=$ServiceFolder&quot;

elif [ $Environment == &quot;dev&quot; ]; then 
docker build --no-cache -t registry-test.example.com/dev/microservice:$Tag -f config/Dockerfile .
docker push registry-test.example.com/dev/microservice:$Tag

ansible-playbook /tmp/deployment-scripts/ansible-playbooks/deploy-snapshot/deploy.yml --extra-vars=&quot;Environment=$Environment Image=$Image Tag=$Tag ServiceFolder=$ServiceFolder&quot;

elif [ $Environment == &quot;staging&quot; ]; then 
docker build --no-cache -t registry.example.com/$Environment/microservice:$Tag -f config/Dockerfile .
docker push registry.example.com/$Environment/microservice:$Tag

ansible-playbook /var/lib/jenkins/deployment-scripts/ansible-playbooks/deploy-snapshot/deploy.yml --extra-vars=&quot;Environment=$Environment Image=$ImageStaging Tag=$Tag ServiceFolder=$ServiceFolder&quot;

else 
echo &quot;$Environment not ready&quot;

fi</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <jenkins.plugins.slack.SlackNotifier plugin="slack@2.0.1">
      <teamDomain></teamDomain>
      <authToken></authToken>
      <buildServerUrl>https://jenkins-test.example.com/</buildServerUrl>
      <room></room>
      <startNotification>true</startNotification>
      <notifySuccess>true</notifySuccess>
      <notifyAborted>false</notifyAborted>
      <notifyNotBuilt>false</notifyNotBuilt>
      <notifyUnstable>true</notifyUnstable>
      <notifyFailure>true</notifyFailure>
      <notifyBackToNormal>true</notifyBackToNormal>
      <notifyRepeatedFailure>false</notifyRepeatedFailure>
      <includeTestSummary>false</includeTestSummary>
      <commitInfoChoice>NONE</commitInfoChoice>
      <includeCustomMessage>true</includeCustomMessage>
      <customMessage>${version}@$Environment (branch $branch)</customMessage>
    </jenkins.plugins.slack.SlackNotifier>
    <com.dabsquared.gitlabjenkins.publisher.GitLabMessagePublisher plugin="gitlab-plugin@1.4.0">
      <onlyForFailure>false</onlyForFailure>
      <replaceSuccessNote>false</replaceSuccessNote>
      <replaceFailureNote>false</replaceFailureNote>
      <replaceAbortNote>false</replaceAbortNote>
      <successNoteText></successNoteText>
      <failureNoteText></failureNoteText>
      <abortNoteText></abortNoteText>
    </com.dabsquared.gitlabjenkins.publisher.GitLabMessagePublisher>
    <com.dabsquared.gitlabjenkins.publisher.GitLabVotePublisher plugin="gitlab-plugin@1.4.0"/>
  </publishers>
  <buildWrappers>
    <org.jenkinsci.plugins.xvfb.Xvfb plugin="xvfb@1.1.3">
      <installationName>Xvfb</installationName>
      <screen></screen>
      <debug>false</debug>
      <timeout>0</timeout>
      <displayNameOffset>0</displayNameOffset>
      <additionalOptions></additionalOptions>
      <shutdownWithBuild>false</shutdownWithBuild>
      <autoDisplayName>false</autoDisplayName>
      <assignedLabels></assignedLabels>
      <parallelBuild>false</parallelBuild>
    </org.jenkinsci.plugins.xvfb.Xvfb>
  </buildWrappers>
</project>
